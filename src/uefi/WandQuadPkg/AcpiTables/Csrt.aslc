//   
//   BSD 3-Clause License
//   
//   Copyright (c) 2020, Kurt Kennett
//   All rights reserved.
//   
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   
//   1. Redistributions of source code must retain the above copyright notice, this
//      list of conditions and the following disclaimer.
//   
//   2. Redistributions in binary form must reproduce the above copyright notice,
//      this list of conditions and the following disclaimer in the documentation
//      and/or other materials provided with the distribution.
//   
//   3. Neither the name of the copyright holder nor the names of its
//      contributors may be used to endorse or promote products derived from
//      this software without specific prior written permission.
//   
//   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
//   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//   DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
//   FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
//   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
//   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
//   CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
//   OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
//   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
#include "AcpiDefs.h"
#include "..\Include\WandQuad.h"

//------------------------------------------------------------------------
// Timer Resource Group
//------------------------------------------------------------------------

//
// Each timer consumes 4K of address space.
//
#define TIMER_ADDRES_SIZE    0x1000

#define TIMER_CAP_ALWAYS_ON     0x00000001 // Timer is always ON.
#define TIMER_CAP_UP_COUNTER    0x00000002 // Up counter vs. down counter (0)
#define TIMER_CAP_READABLE      0x00000004 // Counter has a software interface.
#define TIMER_CAP_PERIODIC      0x00000008 // Can generate periodic interrupts.
#define TIMER_CAP_DRIVES_IRQ    0x00000010 // Timer interrupt drives a physical IRQ.
#define TIMER_CAP_ONE_SHOT      0x00000020 // Counter is capable pf generating one-shot interrupts

//
// Timer source clock codes
//
typedef enum 
{
    GPT_CLOCK_NONE        = 0,
    GPT_CLOCK_PERIPHERAL  = 1,
    GPT_CLOCK_HI_FREQ     = 2,
    GPT_CLOCK_EXT         = 3,
    GPT_CLOCK_LOW_FREQ    = 4,
    GPT_CLOCK_OSC         = 5,

} GPT_SOURCE_CLOCK;

//
// EPIT timer source clock codes
//
typedef enum
{
    EPIT_CLOCK_NONE        = 0,
    EPIT_CLOCK_PERIPHERAL  = 1,
    EPIT_CLOCK_HI_FREQ     = 2,
    EPIT_CLOCK_LOW_FREQ    = 3,

} EPIT_SOURCE_CLOCK;


// Timer descriptor
typedef struct 
{
    EFI_ACPI_5_0_CSRT_RESOURCE_DESCRIPTOR_HEADER Header;

    UINT32 Capabilities;
    UINT32 Width;
    UINT32 Source;
    UINT32 Frequency;
    UINT32 FrequencyScale;
    UINT32 BaseAddress;
    UINT32 Size;
    UINT32 Interrupt;
} __attribute__((packed)) RD_TIMER;

#define CSRT_PL310_MINIMUM_VERSION   1
#define CSRT_PL310_VERSION_2         2
#define CSRT_PL310_RAW_PROTOCOL      0
#define CSRT_PL310_SMC_PROTOCOL      1

// L2 cache descriptor
typedef struct 
{
    EFI_ACPI_5_0_CSRT_RESOURCE_DESCRIPTOR_HEADER Header;
    UINT32 Version;
    UINT32 ManagementProtocol;
    UINT64 Address;
} __attribute__((packed)) RD_L2_CACHE;

// Timer group descriptor
typedef struct 
{
    EFI_ACPI_5_0_CSRT_RESOURCE_GROUP_HEADER Header;
    RD_TIMER Timers[3];
} __attribute__((packed)) RG_TIMER;

// PL310 L2 cache controller descriptor
typedef struct 
{
    EFI_ACPI_5_0_CSRT_RESOURCE_GROUP_HEADER Header;
    RD_L2_CACHE L2Cache;
} __attribute__((packed)) RG_L2_CACHE;

//------------------------------------------------------------------------
// CSRT structure for this platform
//------------------------------------------------------------------------
typedef struct 
{
    EFI_ACPI_DESCRIPTION_HEADER CsrtHeader; // Standard ACPI Header
    RG_TIMER TimerResourceGroup;            // Timer Resource Group
    RG_L2_CACHE L2CacheResourceGroup;       // PL310 L2 Cache Resource Group
} __attribute__((packed)) EFI_ACPI_CSRT_TABLE;


EFI_ACPI_CSRT_TABLE Csrt = 
{
    //------------------------------------------------------------------------
    // CSRT Header
    //------------------------------------------------------------------------
    {
        EFI_ACPI_5_0_CORE_SYSTEM_RESOURCE_TABLE_SIGNATURE,        // Signature "CSRT"
        sizeof(EFI_ACPI_DESCRIPTION_HEADER) +                   // Length
          sizeof(RG_TIMER) + sizeof(RG_L2_CACHE),
        EFI_ACPI_5_0_CSRT_REVISION,                                // Revision
        0x00,                                                    // Checksum calculated at runtime.
        EFI_ACPI_OEM_ID,                                        // OEMID is a 6 bytes long field.
        EFI_ACPI_OEM_TABLE_ID,                                    // OEM table identification(8 bytes long).
        EFI_ACPI_OEM_REVISION,                                    // OEM revision number.
        EFI_ACPI_CREATOR_ID,                                    // ASL compiler vendor ID.
        EFI_ACPI_CREATOR_REVISION,                                // ASL compiler revision number.
    },

    //------------------------------------------------------------------------
    // TimerResourceGroup
    //------------------------------------------------------------------------
    {
        // Timer group header
        {
            sizeof(RG_TIMER),               // Resource Group Length
            SIGNATURE_32('F','S','C','L'),  // VendorId
            0,                              // SubvendorId
            0x0001,                         // DeviceId
            0,                              // SubdeviceId
            0,                              // Revision
            0,                              // Reserved
            0                               // No shared info

        }, // Timer group header

        //------------------------------------------------------------------------
        // Timers
        //------------------------------------------------------------------------
        {
            // Counter (GPT)
            {
                {
                    sizeof(RD_TIMER),               // Resource Descriptor Length
                    EFI_ACPI_CSRT_RD_TYPE_TIMER,       // Resource Type
                    EFI_ACPI_CSRT_RD_SUBTYPE_TIMER, // Resource Subtype
                    3,                              // ResourceId
                },
                TIMER_CAP_READABLE      |       // Capabilities
                    TIMER_CAP_ALWAYS_ON |
                    TIMER_CAP_UP_COUNTER,
                32,                             // Timer width (bits)
                GPT_CLOCK_OSC,                  // Source
                WANDQUAD_GPT_SRC_FREQ_HZ,       // Frequency
                24,                             // Frequency scale
                IMX6_PHYSADDR_GPT,              // 32 bit Physical address
                TIMER_ADDRES_SIZE,              // Size of timer address space
                0,                              // N.B. No interrupt on this counter

            }, // Counter (GPT)

            // Timer0 (EPIT1)
            {
                {
                    sizeof(RD_TIMER),                  // Resource Descriptor Length
                    EFI_ACPI_CSRT_RD_TYPE_TIMER,    // Resource Type
                    EFI_ACPI_CSRT_RD_SUBTYPE_TIMER, // Resource Subtype
                    4,                              // ResourceId
                },
                TIMER_CAP_ONE_SHOT      |       // Capabilities
                TIMER_CAP_PERIODIC      |
                    TIMER_CAP_ALWAYS_ON |
                    TIMER_CAP_DRIVES_IRQ,
                32,                             // Timer width (bits)
                EPIT_CLOCK_HI_FREQ,             // Source
                WANDQUAD_HIGH_FREQUENCY_REF_HZ, // Frequency
                1,                              // Frequency scale
                IMX6_PHYSADDR_EPIT1,            // 32 bit Physical address
                TIMER_ADDRES_SIZE,              // Size of timer address space
                IMX6_IRQ_EPIT1,                 // Interrupt

            }, // Timer0 (EPIT1)

            // Timer1 (EPIT2)
            {
                {
                    sizeof(RD_TIMER),               // Resource Descriptor Length
                    EFI_ACPI_CSRT_RD_TYPE_TIMER,    // Resource Type
                    EFI_ACPI_CSRT_RD_SUBTYPE_TIMER, // Resource Subtype
                    5,                              // ResourceId
                },
                TIMER_CAP_ONE_SHOT      |       // Capabilities
                TIMER_CAP_PERIODIC      |
                    TIMER_CAP_ALWAYS_ON |
                    TIMER_CAP_DRIVES_IRQ,
                32,                             // Timer width (bits)
                EPIT_CLOCK_HI_FREQ,             // Source
                WANDQUAD_HIGH_FREQUENCY_REF_HZ, // Frequency
                1,                              // Frequency scale
                IMX6_PHYSADDR_EPIT2,            // 32 bit Physical address
                TIMER_ADDRES_SIZE,              // Size of timer address space
                IMX6_IRQ_EPIT2,                 // Interrupt

            }, // Timer1 (EPIT2)

        } // Timers

    }, // TimerResourceGroup

    //------------------------------------------------------------------------
    // L2CacheResourceGroup
    //------------------------------------------------------------------------
    {
        // L2 cache group header
        {
            sizeof(RG_L2_CACHE),            // Resource Group Length
            SIGNATURE_32('A','R','M','H'),  // VendorId
            SIGNATURE_32('A','R','M','H'),  // SubvendorId
            0x0310,                         // DeviceId
            0,                              // SubdeviceId
            0,                              // Revision
            0,                              // Reserved
            0                               // No shared info

        }, // L2 cache group header

        //------------------------------------------------------------------------
        // PL310 L2 cache controller
        //------------------------------------------------------------------------
        {
            {
                sizeof(RD_L2_CACHE),            // Resource Descriptor Length
                EFI_ACPI_CSRT_RD_TYPE_CACHE,    // Resource Type
                EFI_ACPI_CSRT_RD_SUBTYPE_CACHE, // Resource Subtype
                0,                              // UID
            },
            CSRT_PL310_VERSION_2,           // Version
            CSRT_PL310_RAW_PROTOCOL,        // Management Protocol
            IMX6_PHYSADDR_PL310,            // 64 bit Physical address

        }, // L2 cache controller (PL310)
    }

}; // CSRT


VOID*
ReferenceAcpiTable (
  VOID
  )
{
  //
  // Reference the table being generated to prevent the optimizer from removing the
  // data structure from the executable
  //
  return (VOID*)&Csrt;
}
