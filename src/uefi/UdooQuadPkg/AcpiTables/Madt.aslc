//   
//   BSD 3-Clause License
//   
//   Copyright (c) 2020, Kurt Kennett
//   All rights reserved.
//   
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   
//   1. Redistributions of source code must retain the above copyright notice, this
//      list of conditions and the following disclaimer.
//   
//   2. Redistributions in binary form must reproduce the above copyright notice,
//      this list of conditions and the following disclaimer in the documentation
//      and/or other materials provided with the distribution.
//   
//   3. Neither the name of the copyright holder nor the names of its
//      contributors may be used to endorse or promote products derived from
//      this software without specific prior written permission.
//   
//   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
//   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//   DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
//   FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
//   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
//   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
//   CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
//   OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
//   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
#include "AcpiDefs.h"
#include "..\Include\UdooQuad.h"

//
// MADT Definitions
//
#define EFI_ACPI_OEM_MADT_REVISION  0x00000000 // Change for your source control
#define EFI_ACPI_MPPP_VESRION       0x00000001 // Multiple processor parking protocol version


//
// Define the number of each table type.
// This is where the table layout is modified.
//
#define EFI_ACPI_PROCESSOR_GIC_COUNT      4
#define EFI_ACPI_GICD_COUNT               1 // Must be only one

//
// ACPI 1.0 MADT structure
//
typedef struct 
{
    EFI_ACPI_1_0_MULTIPLE_APIC_DESCRIPTION_TABLE_HEADER Header;
    EFI_ACPI_5_0_GIC_STRUCTURE                          Gic[EFI_ACPI_PROCESSOR_GIC_COUNT];
    EFI_ACPI_5_0_GIC_DISTRIBUTOR_STRUCTURE              GicD[EFI_ACPI_GICD_COUNT];
} __attribute__((packed)) EFI_ACPI_1_0_MULTIPLE_APIC_DESCRIPTION_TABLE;

//
// Multiple APIC Description Table
//
EFI_ACPI_1_0_MULTIPLE_APIC_DESCRIPTION_TABLE Madt = 
{
    //
    // MADT header
    //
    {
        {
            EFI_ACPI_1_0_APIC_SIGNATURE,
            sizeof(EFI_ACPI_1_0_MULTIPLE_APIC_DESCRIPTION_TABLE),
            EFI_ACPI_1_0_MULTIPLE_APIC_DESCRIPTION_TABLE_REVISION,

            //
            // Checksum will be updated at runtime
            //
            0x00,
  
            //
            // It is expected that these values will be programmed at runtime
            //
            EFI_ACPI_OEM_ID,
  
            EFI_ACPI_OEM_TABLE_ID,
            EFI_ACPI_OEM_MADT_REVISION,
            EFI_ACPI_CREATOR_ID,
            EFI_ACPI_CREATOR_REVISION,
        },
        //
        // MADT specific fields
        //
        IMX6_PHYSADDR_ARM_GIC_INTC,
        0

    }, // Header
  
    //
    // GIC Structures
    //
    {
        {
            EFI_ACPI_5_0_GIC,                       // Type
            sizeof (EFI_ACPI_5_0_GIC_STRUCTURE),    // Length
            EFI_ACPI_RESERVED_BYTE,                 // Reserved 2 bytes. Must be zero
            0x00,                                   // GIC ID - MUST BE the ARM CPU Interface Number for this proc. Change if needed.
            0x00,                                   // ACPI Processor ID - A unique number for this processor. It will be used in the DSDT, too
            0x00000001,                             // Flags - Bit0 = 1 (Processor Enabled); BIT1 = 0 (Performance Interrupt is Level-triggered) Change if needed.
            EFI_ACPI_MPPP_VESRION,                  // Version of the arm processor parking protocol
            0x00,                                   // Performance interrupt gsi
            UDOOQUAD_OCRAM_PHYSICAL_PARK_PAGES,     // The 64-bit physical address of the processor Parking Protocol mailbox
            IMX6_PHYSADDR_ARM_GIC_INTC,             // GIC Physical Base Address,don't provide it, we use the ADDRESS in MADT
        }, 

        // 2nd Processor
        {
            EFI_ACPI_5_0_GIC,                               // Type
            sizeof (EFI_ACPI_5_0_GIC_STRUCTURE),            // Length
            EFI_ACPI_RESERVED_BYTE,                         // Reserved 2 bytes. Must be zero
            0x01,                                           // GIC ID - MUST BE the ARM CPU Interface Number for this proc. Change if needed.
            0x01,                                           // ACPI Processor ID - A unique number for this processor. It will be used in the DSDT, too
            0x00000001,                                     // Flags - Bit0 = 1 (Processor Enabled); BIT1 = 0 (Performance Interrupt is Level-triggered) Change if needed.
            EFI_ACPI_MPPP_VESRION,                          // Version of the arm processor parking protocol
            0x00,                                           // Performance interrupt gsi
            UDOOQUAD_OCRAM_PHYSICAL_PARK_PAGES + 0x1000,    // The 64-bit physical address of the processor Parking Protocol mailbox
            IMX6_PHYSADDR_ARM_GIC_INTC,                     // GIC Physical Base Address,don't provide it, we use the ADDRESS in MADT
        },

        // 3rd Processor
        {
            EFI_ACPI_5_0_GIC,                               // Type
            sizeof (EFI_ACPI_5_0_GIC_STRUCTURE),            // Length
            EFI_ACPI_RESERVED_BYTE,                         // Reserved 2 bytes. Must be zero
            0x02,                                           // GIC ID - MUST BE the ARM CPU Interface Number for this proc. Change if needed.
            0x02,                                           // ACPI Processor ID - A unique number for this processor. It will be used in the DSDT, too
            0x00000001,                                     // Flags - Bit0 = 1 (Processor Enabled); BIT1 = 0 (Performance Interrupt is Level-triggered) Change if needed.
            EFI_ACPI_MPPP_VESRION,                          // Version of the arm processor parking protocol
            0x00,                                           // Performance interrupt gsi
            UDOOQUAD_OCRAM_PHYSICAL_PARK_PAGES + 0x2000,    // The 64-bit physical address of the processor Parking Protocol mailbox
            IMX6_PHYSADDR_ARM_GIC_INTC,                     // GIC Physical Base Address,don't provide it, we use the ADDRESS in MADT
        },

        // 4th Processor
        {
            EFI_ACPI_5_0_GIC,                               // Type
            sizeof (EFI_ACPI_5_0_GIC_STRUCTURE),            // Length
            EFI_ACPI_RESERVED_BYTE,                         // Reserved 2 bytes. Must be zero
            0x03,                                           // GIC ID - MUST BE the ARM CPU Interface Number for this proc. Change if needed.
            0x03,                                           // ACPI Processor ID - A unique number for this processor. It will be used in the DSDT, too
            0x00000001,                                     // Flags - Bit0 = 1 (Processor Enabled); BIT1 = 0 (Performance Interrupt is Level-triggered) Change if needed.
            EFI_ACPI_MPPP_VESRION,                          // Version of the arm processor parking protocol
            0x00,                                           // Performance interrupt gsi
            UDOOQUAD_OCRAM_PHYSICAL_PARK_PAGES + 0x3000,    // The 64-bit physical address of the processor Parking Protocol mailbox
            IMX6_PHYSADDR_ARM_GIC_INTC,                     // GIC Physical Base Address,don't provide it, we use the ADDRESS in MADT
        },
    }, // GIC Structures

    //
    // GICD Structures - Must come AFTER all of he GIC Structures
    //
    {
        {
            EFI_ACPI_5_0_GICD,                              // Type
            sizeof (EFI_ACPI_5_0_GIC_DISTRIBUTOR_STRUCTURE),// Length
            EFI_ACPI_RESERVED_BYTE,                         // Reserved 2 bytes. Must be zero
            0x00,                                           // GICD ID (Can be 0)
            IMX6_PHYSADDR_ARM_GIC_DIST,                     // Location in the Physical address map of the GICD's registers
            0,                                              // Lowest Interrupt Number for the GICD (Typically 0)
            EFI_ACPI_RESERVED_WORD
        }

    } // GICD Structures
};


VOID*
ReferenceAcpiTable (
  VOID
  )
{
  //
  // Reference the table being generated to prevent the optimizer from removing the 
  // data structure from the executable
  //
  return (VOID*)&Madt;
}
